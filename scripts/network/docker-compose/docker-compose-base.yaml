#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
version: '2'

services:
  ca0:
    image: hyperledger/fabric-ca${FABRIC_IMG_TAG}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_CLIENT_HOME=/root/fabric-ca/clients/admin
      - FABRIC_CA_SERVER_CA_NAME=ca-arium
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.arium.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/key.pem
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-tlsca/tlsca.arium.com-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-tlsca/key.pem
    ports:
      - "7054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ../crypto-material/crypto-config/peerOrganizations/arium.com/ca/:/etc/hyperledger/fabric-ca-server-config
      - ../crypto-material/crypto-config/peerOrganizations/arium.com/tlsca:/etc/hyperledger/fabric-ca-server-tlsca
    container_name: ca_peerArium

  ca1:
    image: hyperledger/fabric-ca${FABRIC_IMG_TAG}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_CLIENT_HOME=/root/fabric-ca/clients/admin
      - FABRIC_CA_SERVER_CA_NAME=ca-vda
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.vda.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/key.pem
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-tlsca/tlsca.vda.com-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-tlsca/key.pem
    ports:
      - "8054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ../crypto-material/crypto-config/peerOrganizations/vda.com/ca/:/etc/hyperledger/fabric-ca-server-config
      - ../crypto-material/crypto-config/peerOrganizations/vda.com/tlsca/:/etc/hyperledger/fabric-ca-server-tlsca
    container_name: ca_peerVDA

  ca2:
    image: hyperledger/fabric-ca${FABRIC_IMG_TAG}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_CLIENT_HOME=/root/fabric-ca/clients/admin
      - FABRIC_CA_SERVER_CA_NAME=ca-princeinsurance
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server-config/ca.prince-insurance.com-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server-config/key.pem
      - FABRIC_CA_SERVER_TLS_ENABLED=true
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server-tlsca/tlsca.prince-insurance.com-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server-tlsca/key.pem
    ports:
      - "9054:7054"
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ../crypto-material/crypto-config/peerOrganizations/prince-insurance.com/ca/:/etc/hyperledger/fabric-ca-server-config
      - ../crypto-material/crypto-config/peerOrganizations/prince-insurance.com/tlsca/:/etc/hyperledger/fabric-ca-server-tlsca
    container_name: ca_peerPrinceInsurance

  orderer:
    container_name: orderer
    image: hyperledger/fabric-orderer${FABRIC_IMG_TAG}
    environment:
      - ORDERER_GENERAL_LOGLEVEL=${FABRIC_DEBUG}
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_GENESISFILE=/etc/hyperledger/configtx/genesis.block
      - ORDERER_GENERAL_LOCALMSPID=OrdererMSP
      - ORDERER_GENERAL_LOCALMSPDIR=/etc/hyperledger/orderer/msp
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=node_default
      - ORDERER_GENERAL_TLS_ENABLED=true
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/etc/hyperledger/orderer/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/etc/hyperledger/orderer/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/etc/hyperledger/orderer/tls/ca.crt, /etc/hyperledger/peerOrg1/tls/ca.crt, /etc/hyperledger/peerOrg2/tls/ca.crt, /etc/hyperledger/peerOrg3/tls/ca.crt]
      # ORDERER_GENERAL_TLS_CLIENTROOTCAS = [orderer_rootca + peerorg_rootca + peers_rootca]
      - ORDERER_GENERAL_TLS_CLIENTROOTCAS=[/etc/hyperledger/orderer/tls/ca.crt, /etc/hyperledger/peerOrg1/msp/cacerts/ca.arium.com-cert.pem, /etc/hyperledger/peerOrg2/msp/cacerts/ca.vda.com-cert.pem, /etc/hyperledger/peerOrg3/msp/cacerts/ca.prince-insurance.com-cert.pem, /etc/hyperledger/peerOrg1/tls/ca.crt, /etc/hyperledger/peerOrg2/tls/ca.crt, /etc/hyperledger/peerOrg3/tls/ca.crt]
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/orderer
    command: orderer
    ports:
      - 7050:7050
    volumes:
        - ../crypto-material/:/etc/hyperledger/configtx
        - ../crypto-material/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/:/etc/hyperledger/orderer
        - ../crypto-material/crypto-config/peerOrganizations/arium.com/peers/peer0.arium.com/:/etc/hyperledger/peerOrg1
        - ../crypto-material/crypto-config/peerOrganizations/vda.com/peers/peer0.vda.com/:/etc/hyperledger/peerOrg2
        - ../crypto-material/crypto-config/peerOrganizations/prince-insurance.com/peers/peer0.prince-insurance.com/:/etc/hyperledger/peerOrg3

  peer:
    container_name: peer
    image: hyperledger/fabric-peer${FABRIC_IMG_TAG}
    environment:
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_PEER_ADDRESSAUTODETECT=true
      - CORE_PEER_GOSSIP_ORGLEADER=false
      - CORE_PEER_GOSSIP_USELEADERELECTION=true
      - CORE_PEER_PROFILE_ENABLED=true

      # LOGGING SETTINGS
      - FABRIC_LOGGING_SPEC=${FABRIC_DEBUG}
      - CORE_CHAINCODE_LOGGING_LEVEL=${FABRIC_DEBUG}
      - CORE_LOGGING_MSP=${FABRIC_DEBUG}
      - CORE_LOGGING_GRPC=${FABRIC_DEBUG}
      - CORE_LOGGING_LEDGER=${FABRIC_DEBUG}
      - CORE_LOGGING_GOSSIP=${FABRIC_DEBUG}
      - CORE_LOGGING_PEER_GOSSIP=${FABRIC_DEBUG}

      # TLS SETTINGS
      - CORE_PEER_TLS_ENABLED=true

      ## the following setting redirects chaincode container logs to the peer container logs
      - CORE_VM_DOCKER_ATTACHSTDOUT=true

      # # the following setting starts chaincode containers on the same
      # # bridge network as the peers
      # # https://docs.docker.com/compose/networking/
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=node_default
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start --peer-chaincodedev=true
    volumes:
        - /var/run/:/host/var/run/

  clibase:
    extends:
      file: docker-compose-cli.yaml
      service: clinopeer
    container_name: cli

    environment:
      - GOPATH=/opt/gopath
      - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
      - CORE_CHAINCODE_KEEPALIVE=10
      - FABRIC_CFG_PATH=/etc/hyperledger/config

      # LOGGING SETTINGS
      - FABRIC_LOGGING_SPEC=${FABRIC_DEBUG}

      # TLS SETTINGS
      - CORE_PEER_TLS_ENABLED=true
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    command: /bin/bash
    volumes:
      - /var/run/:/host/var/run/
      - ../crypto-material/:/etc/hyperledger/configtx/

  couchdb:
    container_name: couchdb
    image: hyperledger/fabric-couchdb${FABRIC_COUCHDB_TAG}
